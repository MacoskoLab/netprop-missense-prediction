configfile: "config/config.yml"
configfile: "config/config_local.yml"


import sys
import os

sys.path.append("pipeline_utils")
from pipeline_utils import create_run_name, copy_config_to_run, send_email

# Directory structure variables - dynamically determined as absolute paths
WORKFLOW_DIR = os.path.dirname(os.path.abspath(workflow.snakefile))
SCRIPTS_DIR = os.path.join(WORKFLOW_DIR, "scripts")
ENVS_DIR = os.path.join(WORKFLOW_DIR, "envs")
NOTEBOOKS_DIR = os.path.join(WORKFLOW_DIR, "notebooks")
RULES_DIR = os.path.join(WORKFLOW_DIR, "rules")

# Create run name
run = create_run_name(config)
print(f"########### RUN NAME: {run} ###########", flush=True)


# Include rule files using wildcards
import glob

for rule_file in glob.glob(f"{RULES_DIR}/*/*.smk"):
    if "_legacy" not in rule_file:
        print(f"Including rule file: {rule_file}", flush=True)

        include: rule_file


# Define the main workflow
rule all:
    input:
        expand(
            f"results/{run}/evaluation/weight_matrices_distances_plot.{{ext}}",
            ext=["jpeg", "html"],
        ),
    default_target: True


# Workflow event handlers
onstart:
    copy_config_to_run(run)


onsuccess:
    send_email(
        f"Workflow run {run} completed successfully. Great success!",
        subject=f"[snakemake] Workflow SUCCEEDED ({run})",
        config=config,
    )


onerror:
    send_email(
        f"Workflow run {run} failed. Check the logs for details. Wawaweewa...",
        subject=f"[snakemake] Workflow FAILED ({run})",
        config=config,
    )
